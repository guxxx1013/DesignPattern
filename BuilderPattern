//Step 1:
//Item.java
public interface Item {
  public String name();
  public Packing packing();
  public float price();
}
//Packing.java
public interface Packing {
  public String pack();
}
//Step 2:
//Wrapper.java
public class Wrapper implements Packing {
  @Override
  public String pack() {
    reuturn "Wrapper";
  }
}
//Bottle.Java
public class Bottle implements Packing {
  @Override
  public String pack() {
    return "Bottle";
  }
}
//Step 3:
public abstract class Burger implements Item {

  @Override
  public Packing packing() {
    return new Wrapper();
  }

  @Override
  public abstract float price();
}
//CodeDrink.Java
public abstract class ColdDrink implements Item {

  @Override
  public Packing packing() {
    return new Bottle();
  }

  @Override
  public abstract float price();
}
//Step 4:
public class VegBurger extends Burger {
  @Override
  public float price() {
    return 25.0f;
  }

  @Override
  public String name() {
    return "Veg Burger";
  }
}

public class ChickenBurger extends Burger {
  @Override
  public float price() {
    return 50.5f;
  }

  @Override
  public String name() {
    return "Chicken Burger";
  }
}

public class Coke extends ColdDrink {
  @Override
  public float price() {
    return 30.0f;
  }
  @Override
  pulbic String name() {
    return "Coke";
  }
}

public class Persi extends ColdDrink {
  @Override
  public float price() {
    return 35.0f
  }
  @Override
  public String name() {
    return "Pepsi";
  }
}
//Step 5:
import java.util.*;
public class Meal {
  private List<Item> items = new ArrayList<Item>();
  public void addItem(Item item) {
    items.add(item);
  }
  public float getCost() {
    float cost = 0.0f;
    for (Item item : items) {
      cost += item.price();
    }
    return cost;
  }
  public void showItems() {
    for (Item item : items) {
      System.out.print("Item :" + item.name());
      System.out.print(", Packing :" + item.packing().pack());
      System.out.println(", Price :" + item.price());
    }
  }
}
//Step 6:
public class MealBuilder {
  public Meal prepareVegMeal () {
    Meal meal = new Meal();
    meal.addItem(new VegBurger());
    meal.addItem(new Coke());
    return meal;
  }

  public Meal prepareNonVegMeal() {
    Meal meal = new Meal();
    meal.addItem(new ChickenBurger());
    meal.addItem(new Pepsi());
    return meal;
  }
}

//Step 7: Build Demonstrate;
public class BuilderPatternDemo {
  public static void main(String[] args) {
    MealBuilder mealBuilder = new MealBuilder();
    Meal vegMeal = mealBuilder.prepareVegMeal();
    System.out.println("Veg Meal");
    vegMeal.showItems();
    System.out.println("Total Cost: " + vegMeal.getCost());

    Meal nonVegMeal = mealBuilder.prepareNonVegMeal();
    System.out.println("\n\nNon-Veg Meal");
    nonVegMeal.showItem();
    System.out.println("Total Cost : " + nonVegMeal.getCost());
  }
}

//Step 8: „ÄÅ
